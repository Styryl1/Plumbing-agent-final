#!/usr/bin/env node
// scripts/i18n-aggregate.mjs
import fs from 'node:fs';
import path from 'node:path';

/**
 * Aggregate namespace-based translation files into monolithic files for next-intl
 */
const aggregateTranslations = () => {
  console.log('üîÑ Aggregating namespace files into monolithic translations...\n');

  const messagesDir = path.join(process.cwd(), 'src/i18n/messages');
  
  // Process each language
  ['en', 'nl'].forEach(locale => {
    console.log(`Processing ${locale.toUpperCase()}...`);
    
    const localeDir = path.join(messagesDir, locale);
    const outputPath = path.join(messagesDir, `${locale}.json`);
    
    if (!fs.existsSync(localeDir)) {
      console.error(`  ‚ùå Directory ${localeDir} does not exist`);
      return;
    }
    
    // Read all namespace files
    const namespaceFiles = fs.readdirSync(localeDir)
      .filter(file => file.endsWith('.json'))
      .sort(); // Ensure consistent ordering
    
    const aggregated = {};
    let totalKeys = 0;
    
    for (const file of namespaceFiles) {
      const filePath = path.join(localeDir, file);
      const namespace = path.basename(file, '.json');
      
      try {
        const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        const keyCount = Object.keys(content).length;
        
        // Merge the namespace content into the aggregated object
        Object.assign(aggregated, content);
        
        console.log(`  ‚úì ${file}: ${keyCount} keys`);
        totalKeys += keyCount;
      } catch (error) {
        console.error(`  ‚ùå Error reading ${file}:`, error.message);
      }
    }
    
    // Sort keys alphabetically for consistent output
    const sortedAggregated = Object.keys(aggregated)
      .sort()
      .reduce((acc, key) => {
        acc[key] = aggregated[key];
        return acc;
      }, {});
    
    // Write aggregated file
    fs.writeFileSync(outputPath, JSON.stringify(sortedAggregated, null, 2) + '\n');
    
    console.log(`  Total: ${totalKeys} keys`);
    console.log(`  ‚úÖ Written to ${path.relative(process.cwd(), outputPath)}\n`);
  });

  console.log('‚úÖ Translation aggregation complete!');
  console.log('\nüìÅ Output files:');
  console.log('  src/i18n/messages/en.json');
  console.log('  src/i18n/messages/nl.json');
  
  console.log('\nüí° These files are automatically generated from the namespace files.');
  console.log('   Edit the namespace files in src/i18n/messages/{en,nl}/ instead.');
  
  // Add a header comment to the generated files to remind developers
  ['en', 'nl'].forEach(locale => {
    const outputPath = path.join('src/i18n/messages', `${locale}.json`);
    const content = fs.readFileSync(outputPath, 'utf8');
    
    const headerComment = `// This file is automatically generated by scripts/i18n-aggregate.mjs
// Do not edit directly! Edit the namespace files in src/i18n/messages/${locale}/ instead.
// Run 'pnpm i18n:aggregate' to regenerate this file.

`;
    
    // For JSON files, we can't add comments, but we can create a README
    const readmePath = path.join('src/i18n/messages', `${locale}`, 'README.md');
    const readmeContent = `# Translation Namespace Files

This directory contains translation files split by namespace for better maintainability.

## How it works

1. **Edit these namespace files** - not the parent \`${locale}.json\`
2. **Run \`pnpm i18n:aggregate\`** to rebuild the monolithic file
3. **The parent \`${locale}.json\`** is automatically generated for next-intl compatibility

## Files in this directory

- **common.json** - Root level keys, shared utilities (actions, ui, etc.)
- **invoices.json** - Invoice management and billing
- **jobs.json** - Job scheduling and management  
- **providers.json** - Third-party integrations (accounting providers)
- **ui.json** - User interface elements (forms, tables, navigation)
- **system.json** - System, auth, and application-level messages
- **whatsapp.json** - WhatsApp integration messages
- **employees.json** - Employee management
- **actions.json** - Action buttons and CTAs
- **misc.json** - Miscellaneous and smaller namespaces

## Adding new keys

1. Determine which namespace file the key belongs to
2. Add the key to the appropriate \`.json\` file in this directory
3. Run \`pnpm i18n:aggregate\` to update the parent file
4. Run \`pnpm i18n:sync\` to ensure parity between languages
`;
    
    fs.writeFileSync(readmePath, readmeContent);
  });
  
  console.log('\nüìù Created README files in namespace directories');
};

aggregateTranslations();